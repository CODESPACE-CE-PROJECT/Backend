generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model School {
  schoolId    String      @id @default(uuid())
  schoolName  String
  pictureUrl  String?
  package     PackageType
  isEnable    Boolean     @default(true)
  address     String?
  subDistrict String?
  district    String?
  province    String?
  postCode    String?
  courses     Course[]
  permission  Permission?
  users       Users[]
}

model Permission {
  permissionId              String  @id @default(uuid())
  maxCreateTeacher          Int
  maxCreateStudent          Int
  maxCreateCoursePerTeacher Int
  canCreateUser             Boolean
  canUpdateUser             Boolean
  canDeleteUser             Boolean
  schoolId                  String  @unique
  school                    School  @relation(fields: [schoolId], references: [schoolId], onDelete: Cascade)
}

model Users {
  username            String             @id
  email               String?
  hashedPassword      String
  studentNo           String?
  firstName           String
  lastName            String
  gender              Gender
  role                Role               @default(STUDENT)
  pictureUrl          String?
  IpAddress           String?
  isActived           Boolean            @default(false)
  allowLogin          Boolean            @default(true)
  isEnable            Boolean            @default(true)
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  schoolId            String
  codeSpace           CodeSpace[]
  course              Course[]
  courseAnnounce      CourseAnnounce[]
  courseStudent       CourseStudent[]
  courseTeacher       CourseTeacher[]
  replyAnnounce       ReplyAnnounce[]
  submission          Submission[]
  school              School             @relation(fields: [schoolId], references: [schoolId], onDelete: Cascade)
  notification        Notification[]
  closedNotifications UserNotification[]
  assignment          Assignment[]
}

model CodeSpace {
  codeSpaceId String @id @default(uuid())
  language    String
  sourceCode  String
  fileName    String
  username    String
  user        Users  @relation(fields: [username], references: [username], onDelete: Cascade)
}

model Course {
  courseId       String           @id @default(uuid())
  title          String
  description    String?
  backgroundUrl  String?
  username       String
  user           Users            @relation(fields: [username], references: [username], onDelete: Cascade)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  schoolId       String
  assignment     Assignment[]
  school         School           @relation(fields: [schoolId], references: [schoolId], onDelete: Cascade)
  courseAnnounce CourseAnnounce[]
  courseStudent  CourseStudent[]
  courseTeacher  CourseTeacher[]
  Notification   Notification[]
}

model CourseAnnounce {
  courseAnnounceId String          @id @default(uuid())
  username         String
  user             Users           @relation(fields: [username], references: [username], onDelete: Cascade)
  description      String
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  courseId         String
  course           Course          @relation(fields: [courseId], references: [courseId], onDelete: Cascade)
  replyAnnounce    ReplyAnnounce[]
}

model ReplyAnnounce {
  replyAnnounceId  String         @id @default(uuid())
  message          String
  username         String
  user             Users          @relation(fields: [username], references: [username], onDelete: Cascade)
  createAt         DateTime       @default(now())
  updateAt         DateTime       @updatedAt
  courseAnnounceId String
  courseAnnounce   CourseAnnounce @relation(fields: [courseAnnounceId], references: [courseAnnounceId], onDelete: Cascade)
}

model CourseStudent {
  courseStudentId String @id @default(uuid())
  username        String
  courseId        String
  course          Course @relation(fields: [courseId], references: [courseId], onDelete: Cascade)
  user            Users  @relation(fields: [username], references: [username], onDelete: Cascade)
}

model CourseTeacher {
  courseTeachertId String @id @default(uuid())
  username         String
  courseId         String
  course           Course @relation(fields: [courseId], references: [courseId], onDelete: Cascade)
  user             Users  @relation(fields: [username], references: [username], onDelete: Cascade)
}

model Assignment {
  assignmentId String                 @id @default(uuid())
  username     String
  title        String
  type         AssignmentType
  isLock       Boolean
  startAt      DateTime
  expireAt     DateTime
  announceType AnnounceAssignmentType @default(UNSET)
  announceDate DateTime               @default(now())
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
  courseId     String
  course       Course                 @relation(fields: [courseId], references: [courseId], onDelete: Cascade)
  user         Users                  @relation(fields: [username], references: [username], onDelete: Cascade)
  problem      Problem[]
}

model Problem {
  problemId    String       @id @default(uuid())
  title        String
  description  String
  hint         String?
  language     LanguageType @default(PYTHON)
  revaleCode   String?
  score        Int
  isRegex      Boolean      @default(false)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  assignmentId String
  constraint   Constraint[]
  assignment   Assignment   @relation(fields: [assignmentId], references: [assignmentId], onDelete: Cascade)
  submission   Submission[]
  testCases    TestCase[]
}

model TestCase {
  testCaseId String  @id @default(uuid())
  input      String
  output     String
  isHidden   Boolean
  problemId  String
  problem    Problem @relation(fields: [problemId], references: [problemId], onDelete: Cascade)
}

model Submission {
  submissionId    String          @id @default(uuid())
  problemId       String
  problem         Problem         @relation(fields: [problemId], references: [problemId], onDelete: Cascade)
  username        String
  user            Users           @relation(fields: [username], references: [username], onDelete: Cascade)
  sourceCode      String
  no              Int
  result          Json?           @db.Json
  stateSubmission StateSubmission
  createdAt       DateTime        @default(now())
}

model Constraint {
  constraintId String         @id @default(uuid())
  type         ConstraintType
  keyword      String
  quantities   Int
  problemId    String
  problem      Problem        @relation(fields: [problemId], references: [problemId], onDelete: Cascade)
}

model Notification {
  notificationId String             @id @default(uuid())
  username       String
  user           Users              @relation(fields: [username], references: [username], onDelete: Cascade)
  courseId       String
  course         Course?            @relation(fields: [courseId], references: [courseId], onDelete: Cascade)
  type           NotificationType
  detail         String
  createdAt      DateTime           @default(now())
  closedBy       UserNotification[]
}

model UserNotification {
  UserNotificationId String       @id @default(uuid())
  userId             String
  notificationId     String
  isClose            Boolean      @default(false)
  user               Users        @relation(fields: [userId], references: [username], onDelete: Cascade)
  notification       Notification @relation(fields: [notificationId], references: [notificationId], onDelete: Cascade)

  @@unique([userId, notificationId])
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
}

enum AssignmentType {
  EXERCISE
  EXAMONLINE
  EXAMONSITE
}

enum LanguageType {
  PYTHON
  C
  CPP
  JAVA
}

enum AnnounceAssignmentType {
  UNSET
  SET
  ANNOUNCED
}

enum PackageType {
  STANDARD
  PREMIUM
}

enum StateSubmission {
  PASS
  FAILED
  NOTSEND
}

enum NotificationType {
  ACTION
  GENERAL
  ANNOUNCE
}

enum ConstraintType {
  FUNCTION
  METHOD
  CLASS
}
